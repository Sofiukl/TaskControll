/*! angularjsappl - v1.0.0 - 2017-12-14 */!function(){"use strict";function DashboardViewService($log){function changeViewType(index){serviceObj.activeView=serviceObj.viewTypes[index],serviceObj.activeViewClass=serviceObj.viewClassTypes[index]}var serviceObj={};return serviceObj.viewTypes=["list","thumbnail"],serviceObj.viewClassTypes=["fa-bg-list","fa-bg-thumbnail"],serviceObj.selectedIndex=1,serviceObj.activeView=serviceObj.viewTypes[serviceObj.selectedIndex],serviceObj.activeViewClass=serviceObj.viewClassTypes[serviceObj.selectedIndex],serviceObj.changeViewType=changeViewType,{changeViewType:serviceObj.changeViewType,getActiveView:function(){return serviceObj.activeView},getActiveViewClass:function(){return serviceObj.activeViewClass}}}angular.module("taskControllApp").factory("DashboardViewService",DashboardViewService)}(),function(){"use strict";function LoginService($http,$q,UserService,USER_ROLES,$rootScope,$state,$log){var service={};return service.validate={},service.validate=function(user){$http.post("/login",{username:user.userName,password:user.userPassword}).success(function(data,status){var isValidUser=!1;200===status&&data.success&&(isValidUser=!0,user.userRole=USER_ROLES[data.role]),isValidUser?(UserService.setLoggedInUser({name:user.userName,password:user.userPassword,role:user.userRole}),$rootScope.isAnyUserLoggedIn=!0,$rootScope.userRole=user.userRole,$state.go("home.dashboard")):($rootScope.isAnyUserLoggedIn=!1,$rootScope.$broadcast("loginFailure",{user:user.userName,reason:data.reason,errorCode:data.errorCode}))}).error(function(data){$rootScope.isAnyUserLoggedIn=!1,$rootScope.$broadcast("loginFailure",{user:user.userName,reason:data.error,errorCode:data.errorCode})})},service.logout=function(){var deferred=$q.defer();return $http.get("/logout").success(function(data){$rootScope.isAnyUserLoggedIn=!1,$rootScope.userRole="",UserService.setLoggedInUser({}),deferred.resolve()}).error(function(data){$rootScope.isAnyUserLoggedIn=!1,deferred.reject()}),deferred.promise},service}angular.module("taskControllApp").factory("LoginService",LoginService)}(),function(){"use strict";function UserService($rootScope){var User={};return User.loggedInUser={},User.isLoggedIn=!1,User.setLoggedInUser=function(user){User.isLoggedIn=!0,User.loggedInUser=user},User.getLoggedInUser=function(){return User.loggedInUser},User.isAnyUserLoggedIn=function(){return User.isLoggedIn},User.expireSession=function(){User.loggedInUser={},User.isLoggedIn=!1,alert(JSON.stringify(User))},{getLoggedInUser:User.getLoggedInUser,setLoggedInUser:User.setLoggedInUser,isAnyUserLoggedIn:User.isAnyUserLoggedIn,expireSession:User.expireSession}}angular.module("taskControllApp").factory("UserService",UserService)}(),function(){"use strict";function FetchProjectsService(DbActionService,toastr,$log,$q){function getAllProjects(userInfo){var defer=$q.defer(),projects=[],defaultCriteria={};return defaultCriteria.status="Open",defaultCriteria.name="Default",DbActionService.getAllProjects({user_id:userInfo.userId,status:"Open"}).then(function(response){angular.forEach(response.data,function(project,index){project.name&&project._id&&projects.push({name:project.name,id:project._id})}),DbActionService.getAllProjects(defaultCriteria).then(function(r){0!=r.data.length&&projects.push({name:r.data[0].name,id:r.data[0]._id}),defer.resolve(projects)},function(r){defer.reject(r)})},function(response){defer.reject(response)}),defer.promise}var projectFetcher={};return projectFetcher.getAllProjects=getAllProjects,projectFetcher}angular.module("taskControllApp").factory("FetchProjectsService",FetchProjectsService)}(),function(){"use strict";function TaskUnderProjectCountService($log,$q,UserService,MakePriorityService,DbActionService,TaskCountService,FetchFeedService){function getCountOfTaskUnderEachProject(projectArray){function findProjectWiseTaskCount(project,index){var defer=$q.defer();console.log("project in promise: "+JSON.stringify(project));var projectName=project.name;return FetchFeedService.getAllFeeds({user_id:UserService.getLoggedInUser().id,status:"Active",name:projectName}).then(function(response){var feed=response.data[0];console.log("feed: "+JSON.stringify(feed));var modifiedFeedPromise=TaskCountService.getCountForAllTaskFeed([feed]);modifiedFeedPromise.then(function(feedArrayWithCount){project.taskCount=feedArrayWithCount[0].taskCount,projectArrayWithCount.push(project),defer.resolve(project)})},function(response){toastr.error(response.data.error_message,"[Error]"),defer.reject("Fail to find task count..")}),defer.promise}function lastTask(){defer.resolve(projectArrayWithCount)}var defer=$q.defer(),promises=[],projectArrayWithCount=[];return angular.forEach(projectArray,function(project,index){promises.push(findProjectWiseTaskCount(project,index))}),$q.all(promises).then(lastTask),defer.promise}var serviceObj={};return serviceObj.getCountOfTaskUnderEachProject=getCountOfTaskUnderEachProject,serviceObj}angular.module("taskControllApp").factory("TaskUnderProjectCountService",TaskUnderProjectCountService)}(),function(){"use strict";function MakePriorityService($log){function encodePriority(priorityObj){if(!angular.isObject(priorityObj))return"task priority can not be empty";for(var keys=["firstStar","secondStar","thirdStar"],priority=0,i=0;i<3;i++)$log.debug("priorityObj[keys[i]] : "+priorityObj[keys[i]]),"none"!==priorityObj[keys[i]]&&(priority+=1);return priority}function decodePriority(priorityValue){for(var keys=["firstStar","secondStar","thirdStar"],cssClasses=["yellow-star-1","yellow-star-2","yellow-star-3"],priorityObj={},i=0;i<priorityValue;i++)priorityObj[keys[i]]=cssClasses[i];return priorityObj}var serviceObj={};return serviceObj.encodePriority=encodePriority,serviceObj.decodePriority=decodePriority,serviceObj}angular.module("taskControllApp").factory("MakePriorityService",MakePriorityService)}(),function(){"use strict";function TaskCountService($log,UserService,MakePriorityService,DbActionService,$q){function getCountForAllTaskFeed(feedArray){function findFeedCount(feed,index){var defer=$q.defer();defer.notify("About to count no of task assoicated with thtis feed.. "+index);var task=(feed.name,{});if(task=feed.feed_criteria,feed.feed_criteria.parentTask&&(task.parentTask=feed.feed_criteria.parentTask),"$today"==feed.feed_criteria.dueDate&&(task.dueDate=moment().format("DD/MM/YYYY")),"$tomorrow"==feed.feed_criteria.dueDate){var today=moment(),tomorrow=today.add(1,"days");task.dueDate=moment(tomorrow).format("DD/MM/YYYY")}if("$nextWeek"==feed.feed_criteria.dueDate){var today=moment(),nextWeek=today.add("days",7);task.dueDate=moment(nextWeek).format("DD/MM/YYYY")}var criteria={};criteria.userId=UserService.getLoggedInUser().id,criteria.status=task.status,task.dueDate&&""!=task.dueDate&&(criteria.dueDate=task.dueDate),task.name&&""!=task.name&&(criteria.name=task.name),task.assignedTo&&""!=task.assignedTo&&(criteria.assignedTo=task.assignedTo),task.parentTask&&""!=task.parentTask&&(criteria.parentTask=task.parentTask),0!=task.priority&&(criteria.priority=task.priority);var sortObj={dueDate:-1};return DbActionService.getAllTasks(criteria,sortObj).then(function(response){feed.taskCount=response.data.length,feedArrayWithCount.push(feed),defer.resolve(feed)},function(response){toastr.error(response.data.error_message,"[Error]"),defer.reject("Fail to found task count.")}),defer.promise}function lastTask(feed){defer.resolve(feedArrayWithCount)}var defer=$q.defer(),feedArrayWithCount=[],promises=[];return angular.forEach(feedArray,function(feed,index){promises.push(findFeedCount(feed,index))}),$q.all(promises).then(lastTask),defer.promise}var serviceObj={};return serviceObj.getCountForAllTaskFeed=getCountForAllTaskFeed,serviceObj}angular.module("taskControllApp").factory("TaskCountService",TaskCountService)}();